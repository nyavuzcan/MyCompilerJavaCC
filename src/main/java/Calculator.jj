options
{
    STATIC = true;
}
PARSER_BEGIN(Calculator)
import java.io.*;
import java.util.HashMap;
public class Calculator
{  static HashMap hashMap = new  HashMap();

    public static void main(String args[]) throws ParseException
    {
        Calculator parser = new Calculator(System.in);
        while (true)
        {
            parser.parseOneLine();
        }
    }
}
PARSER_END(Calculator)
SKIP :
{
    " "
|   "\r"
|   "\t"
}
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < DIGIT: ["0"-"9"] >
|   < EOL: "\n" >
}

TOKEN:
{
 < TANIMLA:"tanimla" >|
  < YAZDIR: "yazdir" >
| < STR: (< LETTER >)+>
| < #LETTER: ["a"-"z", "A"-"Z", "_"] >
| < DIGIT >
}


void parseOneLine():
{
    Token t=null;
    double a;
    String b;
    String left;
    String right;
    Token l=null;
    Token r=null;
    String x;
    Token xt=null;
}

{


    <YAZDIR> ("(" t=<STR> ")" {b =t.image; System.out.println(b);} |( (xt=<STR>)) {x=xt.image; System.out.println(hashMap.get(x));} ) <EOL>

  |
    <TANIMLA> l =<STR> "="   (  r=<STR> | r=<NUMBER> )  <EOL> { left= l.image; right = r.image;
     hashMap.put(left,right);}


     |  a=expr() <EOL>      { System.out.println(a); }
  | <EOL>
  | <EOF>               { System.exit(-1); }
}
double expr():
{
    double a;
    double b;
}
{
    a=term()
    (
        "+" b=expr()    { a += b; }
    |   "-" b=expr()    { a -= b; }
    )*
                        { return a; }
}
double term():
{
    double a;
    double b;
}
{
    a=unary()
    (
        "*" b=term()    { a *= b; }
    |   "/" b=term()    { a /= b; }
    )*
                        { return a; }
}
double unary():
{
    double a;
}
{
    "-" a=element()     { return -a; }
|   a=element()         { return a; }
}
double element():
{
    Token t;
    double a;
}
{
    t=<NUMBER>          { return Double.parseDouble(t.toString()); }
|   "(" a=expr() ")"    { return a; }
}